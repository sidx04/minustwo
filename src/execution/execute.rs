use crate::errors::Error;
use crate::errors::opcode::OpcodeError;
use crate::opcodes::environmental::execute_env;
use crate::opcodes::hash_ops::execute_keccak256;
use crate::opcodes::stack_ops::execute_stack_swap;
use crate::opcodes::{
    Opcode,
    arithmetic::{execute_arithmetic, execute_logical},
    control::execute_control,
    memory_ops::execute_memory,
    stack_ops::{execute_stack_duplicate, execute_stack_pop, execute_stack_push},
};

use crate::execution::ExecutionContext;

pub fn execute_opcode(ctx: &mut ExecutionContext, opcode: usize) -> Result<(), Error> {
    match opcode {
        0x00 => execute_control(Opcode::STOP, ctx),
        0x01 => execute_arithmetic(Opcode::ADD, ctx),
        0x02 => execute_arithmetic(Opcode::SUB, ctx),
        0x03 => execute_arithmetic(Opcode::MUL, ctx),
        0x04 => execute_arithmetic(Opcode::DIV, ctx),
        0x05 => execute_arithmetic(Opcode::SDIV, ctx),
        0x06 => execute_arithmetic(Opcode::MOD, ctx),
        0x07 => execute_arithmetic(Opcode::SMOD, ctx),
        0x08 => execute_arithmetic(Opcode::ADDMOD, ctx),
        0x09 => execute_arithmetic(Opcode::MULMOD, ctx),
        0x0A => execute_arithmetic(Opcode::EXP, ctx),
        0x0B => execute_arithmetic(Opcode::SIGNEXTEND, ctx),
        0x10 => execute_logical(Opcode::LT, ctx),
        0x11 => execute_logical(Opcode::SLT, ctx),
        0x12 => execute_logical(Opcode::GT, ctx),
        0x13 => execute_logical(Opcode::SGT, ctx),
        0x14 => execute_logical(Opcode::EQ, ctx),
        0x15 => execute_logical(Opcode::ISZERO, ctx),
        0x16 => execute_logical(Opcode::AND, ctx),
        0x17 => execute_logical(Opcode::OR, ctx),
        0x18 => execute_logical(Opcode::XOR, ctx),
        0x19 => execute_logical(Opcode::NOT, ctx),
        0x20 => execute_keccak256(Opcode::KECCAK256, ctx),
        0x30 => execute_env(Opcode::ADDRESS, ctx),
        0x31 => execute_env(Opcode::BALANCE, ctx),
        0x32 => execute_env(Opcode::ORIGIN, ctx),
        0x33 => execute_env(Opcode::CALLER, ctx),
        0x34 => execute_env(Opcode::CALLVALUE, ctx),
        0x35 => execute_env(Opcode::CALLDATALOAD, ctx),
        0x36 => execute_env(Opcode::CALLDATASIZE, ctx),
        0x37 => execute_env(Opcode::CALLDATACOPY, ctx),
        0x38 => execute_env(Opcode::CODESIZE, ctx),
        0x39 => execute_env(Opcode::CODECOPY, ctx),
        0x3A => execute_env(Opcode::GASPRICE, ctx),
        0x3B => execute_env(Opcode::EXTCODESIZE, ctx),
        0x3C => execute_env(Opcode::RETURNDATASIZE, ctx),
        0x3D => execute_env(Opcode::EXTCODECOPY, ctx),
        0x3E => execute_env(Opcode::RETURNDATACOPY, ctx),
        0x3F => execute_env(Opcode::EXTCODEHASH, ctx),
        0x50 => execute_stack_pop(Opcode::POP, ctx),
        0x51 => execute_memory(Opcode::MLOAD, ctx),
        0x52 => execute_memory(Opcode::MSTORE, ctx),
        0x60 => execute_stack_push(Opcode::PUSH1, 1, ctx),
        0x61 => execute_stack_push(Opcode::PUSH2, 2, ctx),
        0x62 => execute_stack_push(Opcode::PUSH3, 3, ctx),
        0x63 => execute_stack_push(Opcode::PUSH4, 4, ctx),
        0x64 => execute_stack_push(Opcode::PUSH5, 5, ctx),
        0x65 => execute_stack_push(Opcode::PUSH6, 6, ctx),
        0x66 => execute_stack_push(Opcode::PUSH7, 7, ctx),
        0x67 => execute_stack_push(Opcode::PUSH8, 8, ctx),
        0x68 => execute_stack_push(Opcode::PUSH9, 9, ctx),
        0x69 => execute_stack_push(Opcode::PUSH10, 10, ctx),
        0x6A => execute_stack_push(Opcode::PUSH11, 11, ctx),
        0x6B => execute_stack_push(Opcode::PUSH12, 12, ctx),
        0x6C => execute_stack_push(Opcode::PUSH13, 13, ctx),
        0x6D => execute_stack_push(Opcode::PUSH14, 14, ctx),
        0x6E => execute_stack_push(Opcode::PUSH15, 15, ctx),
        0x6F => execute_stack_push(Opcode::PUSH16, 16, ctx),
        0x70 => execute_stack_push(Opcode::PUSH17, 17, ctx),
        0x71 => execute_stack_push(Opcode::PUSH18, 18, ctx),
        0x72 => execute_stack_push(Opcode::PUSH19, 19, ctx),
        0x73 => execute_stack_push(Opcode::PUSH20, 20, ctx),
        0x74 => execute_stack_push(Opcode::PUSH21, 21, ctx),
        0x75 => execute_stack_push(Opcode::PUSH22, 22, ctx),
        0x76 => execute_stack_push(Opcode::PUSH23, 23, ctx),
        0x77 => execute_stack_push(Opcode::PUSH24, 24, ctx),
        0x78 => execute_stack_push(Opcode::PUSH25, 25, ctx),
        0x79 => execute_stack_push(Opcode::PUSH26, 26, ctx),
        0x7A => execute_stack_push(Opcode::PUSH27, 27, ctx),
        0x7B => execute_stack_push(Opcode::PUSH28, 28, ctx),
        0x7C => execute_stack_push(Opcode::PUSH29, 29, ctx),
        0x7D => execute_stack_push(Opcode::PUSH30, 30, ctx),
        0x7E => execute_stack_push(Opcode::PUSH31, 31, ctx),
        0x7F => execute_stack_push(Opcode::PUSH32, 32, ctx),
        0x80 => execute_stack_duplicate(Opcode::DUP1, 1, ctx),
        0x81 => execute_stack_duplicate(Opcode::DUP2, 2, ctx),
        0x82 => execute_stack_duplicate(Opcode::DUP3, 3, ctx),
        0x83 => execute_stack_duplicate(Opcode::DUP4, 4, ctx),
        0x84 => execute_stack_duplicate(Opcode::DUP5, 5, ctx),
        0x85 => execute_stack_duplicate(Opcode::DUP6, 6, ctx),
        0x86 => execute_stack_duplicate(Opcode::DUP7, 7, ctx),
        0x87 => execute_stack_duplicate(Opcode::DUP8, 8, ctx),
        0x88 => execute_stack_duplicate(Opcode::DUP9, 9, ctx),
        0x89 => execute_stack_duplicate(Opcode::DUP10, 10, ctx),
        0x8A => execute_stack_duplicate(Opcode::DUP11, 11, ctx),
        0x8B => execute_stack_duplicate(Opcode::DUP12, 12, ctx),
        0x8C => execute_stack_duplicate(Opcode::DUP13, 13, ctx),
        0x8D => execute_stack_duplicate(Opcode::DUP14, 14, ctx),
        0x8E => execute_stack_duplicate(Opcode::DUP15, 15, ctx),
        0x8F => execute_stack_duplicate(Opcode::DUP16, 16, ctx),
        0x90 => execute_stack_swap(Opcode::SWAP1, 1, ctx),
        0x91 => execute_stack_swap(Opcode::SWAP2, 2, ctx),
        0x92 => execute_stack_swap(Opcode::SWAP3, 3, ctx),
        0x93 => execute_stack_swap(Opcode::SWAP4, 4, ctx),
        0x94 => execute_stack_swap(Opcode::SWAP5, 5, ctx),
        0x95 => execute_stack_swap(Opcode::SWAP6, 6, ctx),
        0x96 => execute_stack_swap(Opcode::SWAP7, 7, ctx),
        0x97 => execute_stack_swap(Opcode::SWAP8, 8, ctx),
        0x98 => execute_stack_swap(Opcode::SWAP9, 9, ctx),
        0x99 => execute_stack_swap(Opcode::SWAP10, 10, ctx),
        0x9A => execute_stack_swap(Opcode::SWAP11, 11, ctx),
        0x9B => execute_stack_swap(Opcode::SWAP12, 12, ctx),
        0x9C => execute_stack_swap(Opcode::SWAP13, 13, ctx),
        0x9D => execute_stack_swap(Opcode::SWAP14, 14, ctx),
        0x9E => execute_stack_swap(Opcode::SWAP15, 15, ctx),
        0x9F => execute_stack_swap(Opcode::SWAP16, 16, ctx),
        _ => Err(Error::OpcodeError(OpcodeError::InvalidOpcode(opcode))), // Handle unknown opcodes
    }?;
    println!("After executing {:02X?}:\n{}", opcode, ctx.machine.stack);
    Ok(())
}
